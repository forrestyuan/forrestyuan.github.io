<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小生</title>
  
  <subtitle>只想靠两手，向理想挥手....</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://forrestyuan.github.io/"/>
  <updated>2018-01-11T13:42:55.147Z</updated>
  <id>https://forrestyuan.github.io/</id>
  
  <author>
    <name>ForrestYuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CommonJS,AMD,CMD 浅析</title>
    <link href="https://forrestyuan.github.io/2018/01/11/CommonJS-AMD-CMD-%E6%B5%85%E6%9E%90/"/>
    <id>https://forrestyuan.github.io/2018/01/11/CommonJS-AMD-CMD-浅析/</id>
    <published>2018-01-11T12:48:48.000Z</published>
    <updated>2018-01-11T13:42:55.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS模块化："><a href="#JS模块化：" class="headerlink" title="JS模块化："></a>JS模块化：</h1><p>模块通常是指一种代码组织方式，可将程序拆解为独立且通用的代码单元。所谓模块化主要是解决代码分割、作用域隔离、模块之间的依赖管理以及发布到生产环境时的自动化打包与处理等多个方面。<br><strong>优点</strong>：</p><ul><li>代码重用：编写好的代码模块可以重复引用。</li><li>避免变量污染：模块与模块之间的代码所声明的变量不会产生冲突，具有独立的作用域。</li><li>高可维护性：编写好的模块在需要升级代码时，只需要对模块单元进行修改。  </li></ul><p>在开发模块时，开发人员不能各行其道，需要按照一定的规则编写代码，这样的代码才能被彼此引用，于是，便有了 <code>CommonJS</code>, <code>AMD</code>, <code>CMD</code> 这三种规范。</p><h2 id="三种模块化规范的区别"><a href="#三种模块化规范的区别" class="headerlink" title="三种模块化规范的区别"></a>三种模块化规范的区别</h2><ul><li><p>CommonJS 需要三个参数 （require, exports, module)</p><p>AMD （define 方法需要三个参数：模块名称，模块运行的依赖数组，所有依赖都可用之后执行的函数)</p><p>CMD (全局函数define，用来定义模块。 参数 factory 可以是一个函数，也可以为对象或者字符串。 当 factory 为对象、字符串时，表示模块的接口就是该对象、字符串。)</p></li><li><p><strong>AMD/CMD/CommonJs是JS模块化开发的标准，目前对应的实现是RequireJs/SeaJs/nodeJs.</strong></p></li><li><strong>CommonJs主要针对服务端，AMD/CMD主要针对浏览器端，所以最容易混淆的是AMD/CMD。</strong></li><li><strong>AMD/CMD区别，虽然都是并行加载js文件，但还是有所区别。</strong><br><em>AMD是预加载</em>：在并行加载js文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）<br><em>CMD是按需加载</em>：加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的。</li><li><strong>AMD/CMD的优缺点.</strong><br><em>AMD优点</em>：<br>加载快速，尤其遇到多个大文件，因为并行解析，所以同一时间可以解析多个文件。<br><em>AMD缺点</em>：<br>并行加载，异步处理，加载顺序不一定，可能会造成一些困扰，甚至为程序埋下大坑。<br><em>CMD优点</em>：<br>因为只有在使用的时候才会解析执行js文件，因此，每个JS文件的执行顺序在代码中是有体现的，是可控的。<br><em>CMD缺点</em>：<br>执行等待时间会叠加。因为每个文件执行时是同步执行（串行执行），因此时间是所有文件解析执行时间之和，尤其在文件较多较大时，这种缺点尤为明显。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS模块化：&quot;&gt;&lt;a href=&quot;#JS模块化：&quot; class=&quot;headerlink&quot; title=&quot;JS模块化：&quot;&gt;&lt;/a&gt;JS模块化：&lt;/h1&gt;&lt;p&gt;模块通常是指一种代码组织方式，可将程序拆解为独立且通用的代码单元。所谓模块化主要是解决代码分割、作用域隔离、
      
    
    </summary>
    
    
      <category term="前端大法" scheme="https://forrestyuan.github.io/tags/%E5%89%8D%E7%AB%AF%E5%A4%A7%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>python 机器学习 ipynb 文件的打开</title>
    <link href="https://forrestyuan.github.io/2018/01/06/python-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-ipynb-%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%93%E5%BC%80/"/>
    <id>https://forrestyuan.github.io/2018/01/06/python-机器学习-ipynb-文件的打开/</id>
    <published>2018-01-06T03:20:29.000Z</published>
    <updated>2018-01-06T03:29:31.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何查看ipynb文件"><a href="#如何查看ipynb文件" class="headerlink" title="如何查看ipynb文件"></a>如何查看ipynb文件</h1><h2 id="ipynb文件"><a href="#ipynb文件" class="headerlink" title="ipynb文件"></a>ipynb文件</h2><p>ipynb文件可以帮助我们重现数据处理分析的过程。打开这类文件不仅需要Python运行环境还需要ipython。</p><h2 id="windows下打开-ipynb文件"><a href="#windows下打开-ipynb文件" class="headerlink" title="windows下打开.ipynb文件"></a>windows下打开.ipynb文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.首先要下载python，设置环境变量</span><br><span class="line">2.下载pip，设置环境变量</span><br><span class="line">3.打开命令行，按顺序执行下面两个命令</span><br><span class="line">    pip install ipython</span><br><span class="line">    pip install “ipython[notebook]”</span><br><span class="line">4.安装好后，进入ipynb 文件所在目录输入如下命令：</span><br><span class="line">    ipython notebook</span><br></pre></td></tr></table></figure><h2 id="打开效果："><a href="#打开效果：" class="headerlink" title="打开效果："></a>打开效果：</h2><p>输入上面第4条命令后，浏览器会自动打开该文件：<br><img src="https://pic1.zhimg.com/787cbb572f3b5f34f1e4e8f85e531d77_r.jpg" alt="ipython 浏览效果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何查看ipynb文件&quot;&gt;&lt;a href=&quot;#如何查看ipynb文件&quot; class=&quot;headerlink&quot; title=&quot;如何查看ipynb文件&quot;&gt;&lt;/a&gt;如何查看ipynb文件&lt;/h1&gt;&lt;h2 id=&quot;ipynb文件&quot;&gt;&lt;a href=&quot;#ipynb文件&quot; c
      
    
    </summary>
    
    
      <category term="python" scheme="https://forrestyuan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>git 的操作指令</title>
    <link href="https://forrestyuan.github.io/2017/12/26/git-%E7%9A%84%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/"/>
    <id>https://forrestyuan.github.io/2017/12/26/git-的操作指令/</id>
    <published>2017-12-26T09:17:21.000Z</published>
    <updated>2017-12-26T09:18:24.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h2 id="一、git的基本操作"><a href="#一、git的基本操作" class="headerlink" title="一、git的基本操作"></a>一、git的基本操作</h2><h3 id="1、git-init-–初始化仓库"><a href="#1、git-init-–初始化仓库" class="headerlink" title="1、git init –初始化仓库"></a>1、git init –初始化仓库</h3><p>要使用Git进行版本管理，必须先初始化仓库。Git是使用 git init 命令初始化的。建立一个目录并初始化仓库：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> git-tutorial</span><br><span class="line">$ <span class="built_in">cd</span> git-tutorial</span><br><span class="line">$ git init</span><br><span class="line">...初始化信息提示</span><br></pre></td></tr></table></figure><p>如果初始化成功,执行了git init命令的目录下就会生成.git目录。这个.git目录里存储着管理当前目录内容所需的仓库数据。</p><h3 id="2、-git-status-–查看仓库的状态"><a href="#2、-git-status-–查看仓库的状态" class="headerlink" title="2、 git status –查看仓库的状态"></a>2、 git status –查看仓库的状态</h3><p>git status 命令用于显示Git仓库的状态。这是一个十分常用的命令，务必牢记。工作树和仓库在被操作的过程中，状态会不断发生变化。在Git操作过程中时常使用此命令查看状态。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">#On branch master</span><br><span class="line">#</span><br><span class="line">#Initial commit</span><br><span class="line">#</span><br><span class="line">nothing to commit(create/<span class="built_in">copy</span> files and use "git add" to <span class="built_in">break</span>)</span><br></pre></td></tr></table></figure><p>上述执行了命令后的结果显示，当前正处于master 分支下。并且表示尚没有可提交的内容。我们可以在项目仓库目录下创建一个readme.md文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ touch README.<span class="built_in">md</span></span><br><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">#</span><br><span class="line"># Initial commit</span><br><span class="line">## Unctracked files:# (use "git add &lt;file&gt;..." to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">#</span><br><span class="line"># README.<span class="built_in">md</span></span><br><span class="line">nothing added to commit but untracked files present(use "git add "to track)</span><br></pre></td></tr></table></figure><p>可以看到在Untracked files 中显示了 README.md 文件。类似的，只要对Git的工作树或仓库进行操作，git status 命令的显示结果就会发生变化。</p><h3 id="3、-git-add-–向暂存区添加文件"><a href="#3、-git-add-–向暂存区添加文件" class="headerlink" title="3、 git add –向暂存区添加文件"></a>3、 git add –向暂存区添加文件</h3><p>仅用git仓库的工作树创建了文件，该文件并不会被记入Git 仓库的版本管理对象中。要想让文件成为Git仓库的管理对象，就需要用 git add命令将其加入暂存区（Stage 或者 Index）中。暂存区是提交之前的一个临时区域。</p><p><code>$ git add README.md</code></p><h3 id="4、-git-commit-–保存仓库的历史记录"><a href="#4、-git-commit-–保存仓库的历史记录" class="headerlink" title="4、 git commit –保存仓库的历史记录"></a>4、 git commit –保存仓库的历史记录</h3><p>git commit 命令可以将当前暂存区中的文件实际保存到仓库的历史记录中。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m "First commit"</span><br></pre></td></tr></table></figure><p>-m参数后的”First commit”称作提交信息，是对这个提交的概述。</p><h3 id="5、-git-log-–查看提交日志"><a href="#5、-git-log-–查看提交日志" class="headerlink" title="5、 git log –查看提交日志"></a>5、 git log –查看提交日志</h3><p>git log 命令可以查看以往仓库提交的日志。包括可以查看什么人在什么时候进行了提交或合并，以及操作前后有怎样的差别。关于合并我们会在后面解说。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit xxxx</span><br><span class="line"><span class="function">Author: ****</span></span><br><span class="line"><span class="function"><span class="title">Date</span>: <span class="title">sun</span> <span class="title">May</span> 5 16:06:49 2013 +0900</span></span><br></pre></td></tr></table></figure><p>如上所示,commit栏显示的提交的哈希值。Git的其他命令中在指向提交时会用到这个哈希值。Author栏显示的提交的用户名和邮箱地址。Date栏中显示提交执行的日期和时间。再往下就是提交的信息。</p><h3 id="6、-git-diff-–查看更改前后的差别"><a href="#6、-git-diff-–查看更改前后的差别" class="headerlink" title="6、 git diff –查看更改前后的差别"></a>6、 git diff –查看更改前后的差别</h3><p>git diff 命令可以查看工作树，暂存区，最新提交之间的区别。<br>在README.md中写点东西</p><p><code># Git 教程</code><br>执行git diff,查看当前工作树和暂存区的差别。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line">diff --git a/README.<span class="built_in">md</span> b/README.<span class="built_in">md</span></span><br><span class="line">index (hash 值)</span><br><span class="line">--- a/README.<span class="built_in">md</span></span><br><span class="line">+++ b/README.<span class="built_in">md</span></span><br><span class="line">@@ -<span class="number">0</span> , <span class="number">0</span>  +<span class="number">1</span> @@</span><br><span class="line">+# Git教程</span><br></pre></td></tr></table></figure><p>其中”+”表示新增加的行，”-“表示被删除的行。</p><h2 id="二、git分支的操作"><a href="#二、git分支的操作" class="headerlink" title="二、git分支的操作"></a>二、git分支的操作</h2><p>在进行多个并行作业是，常会用到分支。<br><img src="http://images2015.cnblogs.com/blog/1024729/201612/1024729-20161204205523084-810060875.png" alt="分支图"><br>不同的分支中可以同时进行完全不同的作业。等该分支的作业完成后再与master分支合并。</p><h3 id="1、git-branch-–显示分支一览表"><a href="#1、git-branch-–显示分支一览表" class="headerlink" title="1、git branch –显示分支一览表"></a>1、git branch –显示分支一览表</h3><p>git branch 命令可以将分支名列表显示，同时可以确认当前所在分支。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>上面的*号表示当前处于master 分支下，且在该分支下进行开发，而且当前仅有一个master 分支。</p><h3 id="2、git-checkout-b-–创建、切换分支"><a href="#2、git-checkout-b-–创建、切换分支" class="headerlink" title="2、git checkout -b –创建、切换分支"></a>2、git checkout -b –创建、切换分支</h3><p>如果想以当前的master分支为基础创建新的分支，我们需要用到<br>git checkout -b 命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$git checkout -b feature-a</span><br><span class="line">#Switched to a new branch 'feature-a'</span><br><span class="line">等同于</span><br><span class="line">$ git branch feature-a</span><br><span class="line">$ git checkout feature-a</span><br><span class="line">表示创建分支并切换分支。</span><br></pre></td></tr></table></figure><h3 id="3、git-merge-–合并分支"><a href="#3、git-merge-–合并分支" class="headerlink" title="3、git merge –合并分支"></a>3、git merge –合并分支</h3><p>分支在功能特性开发完成后，往往需要讲这些特性添加到主分支中，此时就需要将分支合并。</p><ul><li>首先切换到主分支master分支</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">#Switched to branch 'master'</span><br></pre></td></tr></table></figure><ul><li>合并分支</li></ul><p><code>$ git merge --no-ff feature-a</code></p><h2 id="三、更改提交的操作"><a href="#三、更改提交的操作" class="headerlink" title="三、更改提交的操作"></a>三、更改提交的操作</h2><h3 id="1、git-reset-–回溯历史版本"><a href="#1、git-reset-–回溯历史版本" class="headerlink" title="1、git reset –回溯历史版本"></a>1、git reset –回溯历史版本</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;hash值&gt;</span><br><span class="line">#HEAD is now <span class="built_in">at</span> **** Add index</span><br></pre></td></tr></table></figure><h3 id="2、消除冲突"><a href="#2、消除冲突" class="headerlink" title="2、消除冲突"></a>2、消除冲突</h3><p>假如此时有两个分支，A和B ，A分支里的README.md 里有aaa内容，B分支里的README.md里有bbb内容，此时，A分支更改的部分与本次想要合并的fix-B分支更改的部分发生冲突。<br>解决冲突：打开冲突文件更改冲突的部分。</p><h2 id="四、推送至远程仓库"><a href="#四、推送至远程仓库" class="headerlink" title="四、推送至远程仓库"></a>四、推送至远程仓库</h2><h3 id="1、git-remote-add-–添加远程仓库"><a href="#1、git-remote-add-–添加远程仓库" class="headerlink" title="1、git remote add –添加远程仓库"></a>1、git remote add –添加远程仓库</h3><p><code>git remote add origin &lt;远程仓库地址&gt;</code></p><h3 id="2、git-push-–推送至远程仓库"><a href="#2、git-push-–推送至远程仓库" class="headerlink" title="2、git push –推送至远程仓库"></a>2、git push –推送至远程仓库</h3><ul><li><p>推送至master分支：<code>$ git push -u origin master</code></p></li><li><p>推送至master以外的分支：</p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-a</span><br><span class="line">$ git push -u origin feature</span><br></pre></td></tr></table></figure><ul><li>如果执行<code>git remote add origin &lt;远程仓库地址&gt;</code>，出现错误：<br><code>fatal: remote origin already exists</code> 则执行以下语句：<br><code>git remote rm origin</code><br>再往后执行<code>git remote add origin &lt;远程仓库地址&gt;</code>即可.  </li><li>在执行<code>git push -u origin feature</code>时，报错：<br><code>error:failed to push som refs to.......</code><br>则执行以下语句：<br><code>git pull origin master</code><br>先把远程服务器github上面的文件拉先来，再push 上去。</li></ul><h2 id="五、从远程仓库获取"><a href="#五、从远程仓库获取" class="headerlink" title="五、从远程仓库获取"></a>五、从远程仓库获取</h2><h3 id="1、git-clone-–获取远程仓库"><a href="#1、git-clone-–获取远程仓库" class="headerlink" title="1、git clone –获取远程仓库"></a>1、git clone –获取远程仓库</h3><p><code>git clone &lt;仓库远程地址&gt;</code></p><h3 id="2、git-pull-–获取最新远程仓库分支"><a href="#2、git-pull-–获取最新远程仓库分支" class="headerlink" title="2、git pull –获取最新远程仓库分支"></a>2、git pull –获取最新远程仓库分支</h3><p><code>$ git pull origin feature-a</code></p><h2 id="六、推荐："><a href="#六、推荐：" class="headerlink" title="六、推荐："></a>六、推荐：</h2><ul><li>Pro Git (一部零基础的Git学习资料)</li><li>LearnGitBranching（学习git基本操作的网站）</li><li>tryGit（可以以便操作一边学习Git的基本功能）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的使用&quot;&gt;&lt;a href=&quot;#git的使用&quot; class=&quot;headerlink&quot; title=&quot;git的使用&quot;&gt;&lt;/a&gt;git的使用&lt;/h1&gt;&lt;h2 id=&quot;一、git的基本操作&quot;&gt;&lt;a href=&quot;#一、git的基本操作&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="github" scheme="https://forrestyuan.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>GitHub SSH Key的设置</title>
    <link href="https://forrestyuan.github.io/2017/12/26/GitHub-SSH-Key%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>https://forrestyuan.github.io/2017/12/26/GitHub-SSH-Key的设置/</id>
    <published>2017-12-26T04:20:58.000Z</published>
    <updated>2017-12-26T05:07:40.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-SSH-Key的设置"><a href="#GitHub-SSH-Key的设置" class="headerlink" title="GitHub SSH Key的设置"></a>GitHub SSH Key的设置</h1><h2 id="一、开通github账号"><a href="#一、开通github账号" class="headerlink" title="一、开通github账号"></a>一、开通github账号</h2><p>首先前往github 官网创建一个账号。（根据官网提示操作）</p><h2 id="二、关于SSH-Key"><a href="#二、关于SSH-Key" class="headerlink" title="二、关于SSH Key"></a>二、关于SSH Key</h2><p>GitHub 上链接已有仓库时的认证，是通过使用SSH的公开密钥认证方式进行的。现在让我们来创建公开密钥认证所需要的SSH Key,并将其添加到GitHub.</p><p>SSH key提供了一种与GitHub通信的方式，通过这种方式，能够在不输入密码的情况下，将GitHub作为自己的remote端服务器，进行版本控制</p><h2 id="三、设置步骤"><a href="#三、设置步骤" class="headerlink" title="三、设置步骤"></a>三、设置步骤</h2><ul><li>检查SSH keys是否存在</li><li>（如不存在）生成新的ssh key</li><li>将ssh key添加到GitHub中</li></ul><p><img src="http://ozxcv3zng.bkt.clouddn.com/gevin-essay-how-to-generate-SSH-key.png" alt="流程图"></p><h3 id="1、检查SSH-keys"><a href="#1、检查SSH-keys" class="headerlink" title="1、检查SSH keys"></a>1、检查SSH keys</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br><span class="line"># Lists the files in your .ssh directory, if they exist</span><br></pre></td></tr></table></figure><h3 id="2、运行下面的命令创建SSH-key："><a href="#2、运行下面的命令创建SSH-key：" class="headerlink" title="2、运行下面的命令创建SSH key："></a>2、运行下面的命令创建SSH key：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line"></span><br><span class="line"># Creates a new ssh key using the provided email</span><br><span class="line">Generating public/privater rsas key pair.</span><br><span class="line">Enter file in which to save the key</span><br><span class="line">(/Users/your_user_directory/.ssh/id_rsa):(按回车键)</span><br><span class="line">Enter passphrase (empty for no passphrase):(输入密码)</span><br><span class="line">Enter same passphrase again:(再次输入密码)</span><br></pre></td></tr></table></figure><p><code>&quot;your_email@example.com&quot;</code>的部分改成您在创建github账户时用的邮箱地址，棉麻需要在认证时输入，请选择复杂度高并且容易记忆的组合。</p><p>输入密码后会出现如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa.</span><br><span class="line"></span><br><span class="line">Your identification has been saved in/Users/your_user_directory/.ssh/id_rsa.</span><br><span class="line"></span><br><span class="line">The key fingerprint is:</span><br><span class="line">(fingerprint 的值)your_email@example.com</span><br><span class="line">The Key&apos;s randomart image is:</span><br><span class="line">+--[ RAS 2048 ]----+</span><br><span class="line">|     .+    +      |</span><br><span class="line">|       = o O .    |</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>id_rsa文件是私有密钥，id_rsa.pub是公开密钥。</p><h3 id="3、添加公开密钥"><a href="#3、添加公开密钥" class="headerlink" title="3、添加公开密钥"></a>3、添加公开密钥</h3><p>在github中添加公开密钥，用自己喜欢的文本编辑器打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到GitHub的Add SSH key页面即可。</p><p>完成添加后，就可以用手中的私人密钥与github进行认证通信了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &apos;github.com(207.97.227.239)&apos; cnt&apos;t be established.  </span><br><span class="line">RSA key fingerprint is (fingerprint的值)  </span><br><span class="line">Are you sure you want to coninue connnection(yes/no)? (输入yes)</span><br></pre></td></tr></table></figure><p>出现如下结果即为成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi hirocastest! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub-SSH-Key的设置&quot;&gt;&lt;a href=&quot;#GitHub-SSH-Key的设置&quot; class=&quot;headerlink&quot; title=&quot;GitHub SSH Key的设置&quot;&gt;&lt;/a&gt;GitHub SSH Key的设置&lt;/h1&gt;&lt;h2 id=&quot;一、开通g
      
    
    </summary>
    
    
      <category term="github" scheme="https://forrestyuan.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://forrestyuan.github.io/2017/12/09/hello-world/"/>
    <id>https://forrestyuan.github.io/2017/12/09/hello-world/</id>
    <published>2017-12-09T09:03:37.875Z</published>
    <updated>2017-12-09T09:03:37.875Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
